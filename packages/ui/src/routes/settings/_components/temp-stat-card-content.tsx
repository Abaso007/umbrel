import {useState} from 'react'

import {AnimatedNumber} from '@/components/ui/animated-number'
import {SegmentedControl} from '@/components/ui/segmented-control'
import {UNKNOWN} from '@/constants'
import {cn} from '@/shadcn-lib/utils'
import {t} from '@/utils/i18n'
import {keyBy} from '@/utils/misc'
import {isCpuTooHot} from '@/utils/system'

import {cardErrorClass, cardSecondaryValueClass, cardTitleClass, cardValueClass} from './shared'

export function TempStatCardContent({
	tempInCelcius,
	defaultUnit = 'c',
}: {
	tempInCelcius?: number
	defaultUnit?: TempUnit
}) {
	const [unit, setUnit] = useState<TempUnit>(defaultUnit)

	const tempInFahrenheit = celciusToFahrenheit(tempInCelcius)

	const tempNumber = unit === 'c' ? tempInCelcius : tempInFahrenheit
	const tempUnitLabel = tempDescriptionsKeyed[unit].label

	// 60% opacity to base 16
	const opacity = (60).toString(16)
	const isUnknown = tempNumber === undefined

	return (
		<div className='flex flex-col gap-4'>
			<div className={cardTitleClass}>{t('tempurature')}</div>
			<div className='flex flex-wrap-reverse items-center justify-between gap-2'>
				<div className='flex shrink-0 flex-col gap-2.5'>
					<div className={cardValueClass}>
						{isUnknown ? '--' : <AnimatedNumber to={tempNumber} />} {tempUnitLabel}
					</div>
					<div className='flex items-center gap-2'>
						<div
							className={cn('h-[5px] w-[5px] rounded-full ring-3', !isUnknown && 'animate-pulse')}
							style={
								{
									backgroundColor: tempToColor(tempInCelcius),
									'--tw-ring-color': tempToColor(tempInCelcius) + opacity,
								} as React.CSSProperties // forcing because of `--tw-ring-color`
							}
						/>
						<div className={cn(cardSecondaryValueClass, 'leading-inter-trimmed')}>{tempToMessage(tempInCelcius)}</div>
					</div>
				</div>
				<SegmentedControl size='sm' variant='primary' tabs={tempDescriptions} value={unit} onValueChange={setUnit} />
			</div>
			{isCpuTooHot(tempInCelcius ?? 0) && <span className={cardErrorClass}>{t('tempurature.too-hot-suggestion')}</span>}
		</div>
	)
}

const tempDescriptions = [
	{id: 'c', label: '°C'},
	{id: 'f', label: '°F'},
] as const

type TempUnit = (typeof tempDescriptions)[number]['id']

const tempDescriptionsKeyed = keyBy(tempDescriptions, 'id')

// --- Helpers ---

const celciusToFahrenheit = (tempInCelcius?: number) => {
	if (tempInCelcius === undefined) return undefined
	return (tempInCelcius * 9) / 5 + 32
}

function tempToColor(tempInCelcius?: number) {
	const temp = tempInCelcius
	if (temp === undefined) return '#CCCCCC'

	if (temp > 85) {
		return '#F45252'
	}
	if (temp > 75) {
		return '#F1CB6B'
	}
	if (temp > 65) {
		return '#E6E953'
	}
	if (temp > 20) {
		return '#96F16B'
	}
	return '#6BF1E9'
}

// Generated by Github Copilot
function tempToMessage(tempInCelcius?: number) {
	if (tempInCelcius === undefined) return UNKNOWN()

	const temp = tempInCelcius

	if (temp > 85) {
		return t('temp.dangerously-hot')
	}
	if (temp > 75) {
		return t('temp.hot')
	}
	if (temp === 69) {
		return t('temp.nice')
	}
	if (temp > 40) {
		return t('temp.warm')
	}
	if (temp > 20) {
		return t('temp.normal')
	}
	if (temp < -20) return t('temp.too-cold')

	return t('temp.cool')
}
